name: SecureOpsFlow Workflow

on:
  push:
    branches:
      - main

jobs:
  code-quality-sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.projectKey=SecureOpsFlow_SonarQube_Analysis
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Check SonarQube Quality Gate
        id: quality-gate
        run: |
          status=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=SecureOpsFlow_SonarQube_Analysis" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $status"
          if [[ "$status" != "OK" ]]; then
            echo "QA_STATUS=FAILED" >> $GITHUB_ENV
          else
            echo "QA_STATUS=SUCCESS" >> $GITHUB_ENV
          fi

      - name: Send Failed Email Notification
        if: ${{ env.QA_STATUS == 'FAILED' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: tushargayakwad29@gmail.com
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "SonarQube Quality Gate Failed"
          body: "The SonarQube Quality Gate has failed. Please review the analysis results for more details."
          to: tushargayakwad2910@gmail.com
          from: tushargayakwad29@gmail.com

      - name: Send Passed Email Notification
        if: ${{ env.QA_STATUS == 'SUCCESS' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: tushargayakwad29@gmail.com
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "SonarQube Quality Gate Passed"
          body: "The SonarQube Quality Gate has passed successfully. Good job!"
          to: tushargayakwad2910@gmail.com
          from: tushargayakwad29@gmail.com
        
  build-and-scan:
    name: Build and Scan Docker Image
    needs: code-quality-sonarqube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t secureopsflow:latest .

      - name: Image Scan for Vulnerabilities
        id: image_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'secureopsflow:latest'
          exit-code: 0   # Allow the scan to proceed without exiting immediately
          ignore-unfixed: true

      - name: Evaluate Scan Results
        id: scan_eval
        run: |
          trivy image --severity HIGH,CRITICAL secureopsflow:latest >> SecureOpsFlow_dockerfile_vulnerablety_report.txt

      - name: SecureOpsFlow_dockerfile_vulnerablety_report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: tushargayakwad29@gmail.com
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "SecureOpsFlow_dockerfile_vulnerablety_report"
          body: "SecureOpsFlow_dockerfile_vulnerablety_report.==> find a attechment"
          attachments: SecureOpsFlow_dockerfile_vulnerablety_report.txt
          to: tushargayakwad2910@gmail.com
          from: tushargayakwad29@gmail.com
  # push-to-ecr:
  #   name: Push Docker Image to AWS ECR
  #   needs: build-and-scan
  #   runs-on: ubuntu-latest

    # steps:
      # - name: Checkout code
      #   uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: secureopsflow
          IMAGE_TAG: latest
        run: |
          docker tag secureopsflow:latest 590183791756.dkr.ecr.ap-south-1.amazonaws.com/secureopsflow:latest
          docker push 590183791756.dkr.ecr.ap-south-1.amazonaws.com/secureopsflow:latest

